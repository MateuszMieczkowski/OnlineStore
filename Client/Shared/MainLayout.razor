@using OnlineStore.Shared.Clients
@using Blazored.LocalStorage
@using MudBlazor.Extensions
@using OnlineStore.Shared.Enums
@using ISnackbar = MudBlazor.ISnackbar
@using Severity = MudBlazor.Severity
@inherits LayoutComponentBase
@inject ISnackbar Snackbar
@inject ILocalStorageService LocalStorage

<Toast></Toast>
<div class="page">
    <div class="sidebar">
        <NavMenu/>
    </div>

    <main>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" class="p-5">
            <ErrorBoundary @ref="errorBoundary">
                <ChildContent>
                    <MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode"/>
                    <MudDialogProvider/>
                    <MudSnackbarProvider/>
                    <MudPopoverProvider />
                    <CascadingValue Value="this">
                        @Body
                    </CascadingValue>
                </ChildContent>
                <ErrorContent Context="ex">
                    @if (HandleError(ex))
                    {
                        <p>@ex.Message</p>
                    }
                </ErrorContent>
            </ErrorBoundary>
        </MudContainer>
    </main>
</div>

@code
{
    ErrorBoundary errorBoundary;

    private bool _isDarkMode;
    private MudThemeProvider _mudThemeProvider;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var preferences = await LocalStorage.GetItemAsync<UserPreferencesDto>("preferences");
            if (preferences is null)
            {
                _isDarkMode = false;
            }
            else
            {
                _isDarkMode = preferences.UiTheme == UIThemeDto.Dark;
            }
             LocalStorage.Changed += OnLocalStorageChanged;
            StateHasChanged();
        }
    }

    public Task OnSystemThemeChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        errorBoundary?.Recover();
    }

    private void OnLocalStorageChanged(object? sender, ChangedEventArgs e)
    {
        if (e.Key != "preferences")
        {
            return;
        }

        var preferences = e.NewValue.As<UserPreferencesDto>();
        OnSystemThemeChanged(preferences?.UiTheme == UIThemeDto.Dark);
    }

    private bool HandleError(Exception ex)
    {
        Snackbar.Add($"Wystąpił błąd: {ex.Message}", Severity.Error);
        return true;
    }
}
@page "/overview"
@using SneakerBase.Shared.Dtos
@using System.Runtime.CompilerServices
@using SneakersBase.Client.Components
@using SneakersBase.Shared.Dtos
@inject HttpClient Http
@inject ToastService Toast
@inject ISizeService SizeService
@inject IJSRuntime JsRuntime
<PageTitle>Sneakers overview</PageTitle>

<div class="container">
    <ModalDialog @ref="DeleteDialog" Title="Are you sure?"
                 DialogType="ModelDialogBase.ModalDialogType.DeleteCancel"
                 Text="Do you want to delete this?"
                 OnClose="@OnRemoveDialogClose">
    </ModalDialog>

    @if (_editProduct != null)
    {
        <div class="border p-3 mb-3">
            <EditForm Model="_editProduct" @ref="editFormProduct">
                <DataAnnotationsValidator />
                <div class="form-group ">

                    <label class="d-block">Model image</label>
                    <img class="d-block" style="max-width: 20rem" src="@_editProduct.ThumbnailPath" />
                    <InputFile OnChange="(e) => OnInputFileChange(e, _editProduct)" accept=".png" />
                    <ValidationMessage For="@(() => _editProduct.ThumbnailPath)" />
                    <br><br />
                    <label class="d-block" for="InputProductName">Model</label>
                    <InputText class="form-control" id="InputProductName" placeholder="Enter model" @bind-Value=_editProduct.Name />
                    <ValidationMessage For="@(() => _editProduct.Name)" />

                </div>
                <div class="form-group">
                    <label for="InputReferenceNumber">Reference number</label>
                    <InputText class="form-control" id="InputReferenceNumber" placeholder="Enter reference number" @bind-Value="_editProduct.ReferenceNumber" />
                    <ValidationMessage For="@(() => _editProduct.ReferenceNumber)" />
                </div>
                <ValidationMessage For="@(() => _editProduct.AvailableSizes)" />
            </EditForm>

            <div class="form-control">

                <p class="card-text mt-2">Available sizes:</p>

                @foreach (var productSize in _editProduct.AvailableSizes)
                {
                    <EditForm Model="productSize" @ref="editFormProductSize">
                        <DataAnnotationsValidator />
                        <div class="col">
                            <label class="mr-2" for="sizes">Size:</label>
                            <select id="sizes" name="sizes" @bind="productSize.SizeId">
                                @foreach (var size in _sizes)
                                {
                                    if (size.Id == productSize.SizeId)
                                    {
                                        <option value="@size.Id" selected>@size.Name</option>

                                    }
                                    else
                                    {
                                        <option value="@size.Id">@size.Name</option>
                                    }
                                }
                            </select>
                            <label class="mr-2 ml-2" for="quantity">Quantity:</label>
                            <input id="quantity" type="number" min="0" max="1000" @oninput="(e) => UpdateProductQuantity(_editProduct, productSize, e)" @bind-value="productSize.Quantity" />
                            <div class="btn-group mt-1 mb-1" role="group">
                                <button type="button" class="btn btn-dark" @onclick="() => AddQuantity(_editProduct, productSize)">+</button>
                                <button type="button" class="btn btn-dark" @onclick="() => SubQuantity(_editProduct, productSize)">-</button>
                                <button type="button" class="btn btn-dark" @onclick="() => RemoveSize(_editProduct, productSize)">Remove size</button>
                                <ValidationMessage For="@(() => productSize.Quantity)" />
                                <ValidationMessage For="@(() => productSize.SizeId)" />
                            </div>
                        </div>
                    </EditForm>

                }
                <button class="btn btn-dark" type="button" @onclick="() => AddProductSize(_editProduct)">Add new size</button>

            </div>

            <button type="button" @onclick="CancelEdit" class="btn btn-outline-dark">Cancel</button>
            <button type="button" @onclick="SaveEdit" class="btn btn-dark">Save</button>

        </div>
    }
    @if (products == null)
    {
        //  <p><em>Loading...</em></p>
        <div class="spinner"></div>
    }
    else
    {
        <table class="table table-bordered table-hover">
            <thead class="thead-dark">
                <tr>
                    <th scope="col">Name</th>
                    <th scope="col">Reference Number</th>
                    <th scope="col">Quantity</th>
                    <th scope="col">Options</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var product in products)
                {
                    <tr>


                        <td>@product.Name</td>
                        <td>@product.ReferenceNumber</td>
                        <td>@product.Quantity</td>
                        <td>
                            <div class="btn-group justify-content-center" role="group" aria-label="Basic example">
                                <button @onclick="() => Toggle(product)" type="button" class="btn btn-outline-dark show"> @(product.IsHidden ? "Details" : "Hide")</button>
                                <button type="submit" @onclick="() => EditProduct(product)" class="btn btn-dark">Edit</button>
                                <button @onclick="() => OpenDeleteDialog(product)" type="button" class="btn btn-dark">Remove</button>
                            </div>
                        </td>


                    </tr>

                    <div id="info" style="width: 198%" hidden="@product.IsHidden">



                        <div class="form-row">
                            <div class="form-control col-3">

                                <p class="card-text mt-2">Available sizes:</p>
                                <table class="table">
                                    <thead class="thead-dark">
                                        <tr>
                                            <th scope="col">Size</th>
                                            <th scope="col">Quantity</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var productSize in product.AvailableSizes)
                                        {
                                            <tr>
                                                <td>@productSize.Size</td>
                                                <td>@productSize.Quantity</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </div>

                            <div class="form-control col-9">
                                <label class="d-flex">Model image</label>
                                <img class="d-flex" style="max-width: 20rem;" src="@product.ThumbnailPath" />
                            </div>
                        </div>
                    </div>
                }

            </tbody>
        </table>
    }
</div>

@code
{
    private List<ProductDto>? products;
    private List<SizeDto>? _sizes;
    private UpdateProductDto? _editProduct;
    private ProductDto? _confirmEditProduct;
    private EditForm editFormProduct;
    private EditForm editFormProductSize;
    private ProductDto _productToDelete { get; set; }

    private ModelDialogBase DeleteDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        products = await Http.GetFromJsonAsync<List<ProductDto>>("/api/products");
        _sizes = await SizeService.GetAllAsync();
        DeleteDialog.Close();
    }
    private void Toggle(ProductDto product)
    {
        product.IsHidden = !product.IsHidden;
    }


    private void OpenDeleteDialog(ProductDto productToDelete)
    {
        if (productToDelete is null)
            return;
        _productToDelete = productToDelete;
        DeleteDialog.Show();
    }
    protected void OnRemoveDialogClose(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            if (_productToDelete is null)
                return;
            //var response = await Http.DeleteAsync($"api/products/{_productToDelete.Id}");
            //if (response.IsSuccessStatusCode)
            //{
            //   _productToDelete.IsVisible = false;
            products.Remove(_productToDelete);
            _productToDelete = null;
            Toast.ShowToast("Removed successfully", ToastLevel.Success);
            //}
        }
    }
    private void AddQuantity(UpdateProductDto product, UpdateProductSizeDto productSize)
    {
        if (productSize.Quantity == 1000)
            return;
        product.Quantity++;
        productSize.Quantity++;
    }
    private void SubQuantity(UpdateProductDto product, UpdateProductSizeDto productSize)
    {
        if (productSize.Quantity == 0)
            return;
        product.Quantity--;
        productSize.Quantity--;
    }

    private void UpdateProductQuantity(UpdateProductDto product, UpdateProductSizeDto productSize, ChangeEventArgs e)
    {
        int value = 0;
        if (!string.IsNullOrWhiteSpace(e.Value.ToString()))
        {
            value = int.Parse(e.Value.ToString());
        }
        productSize.Quantity = value;
        product.Quantity = product.AvailableSizes.Sum(s => s.Quantity);
    }

    private void RemoveSize(UpdateProductDto product, UpdateProductSizeDto productSize)
    {
        product.Quantity -= productSize.Quantity;
        product.AvailableSizes.Remove(productSize);
    }

    private void AddProductSize(UpdateProductDto product)
    {
        product.AvailableSizes.Add(new UpdateProductSizeDto());
    }
    private async Task OnInputFileChange(InputFileChangeEventArgs e, UpdateProductDto dto)
    {
        var fileFormat = "image/png";
        var imageFile = await e.File.RequestImageFileAsync(fileFormat, 250, 250);

        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);
        dto.ThumbnailPath = $"data:{fileFormat};base64, {Convert.ToBase64String(buffer)}";

        this.StateHasChanged();
    }

    private async void EditProduct(ProductDto editProduct)
    {
        _confirmEditProduct = editProduct;
        _editProduct = new UpdateProductDto()
            {
                Name = editProduct.Name,
                ReferenceNumber = editProduct.ReferenceNumber,
                ThumbnailPath = editProduct.ThumbnailPath,
                AvailableSizes = editProduct.AvailableSizes.Select(s => new UpdateProductSizeDto()
                {
                    Quantity = s.Quantity,
                    SizeId = s.SizeId,
                }).ToList()
            };
        await JsRuntime.InvokeVoidAsync("ScrollTop");
    }
    private void CancelEdit()
    {
        _confirmEditProduct = null;
        _editProduct = null;
    }

    private async void SaveEdit()
    {
        if (_confirmEditProduct == null || _editProduct == null)
            return;
        if (editFormProductSize.EditContext != null && editFormProduct.EditContext != null && (!editFormProduct.EditContext.Validate() || !editFormProductSize.EditContext.Validate()))
        {
            return; ;
        }
        using var response = await Http.PutAsJsonAsync($"api/products/{_confirmEditProduct.Id}", _editProduct);
        if (response.IsSuccessStatusCode)
        {
            var updatedDto = response.Content.ReadFromJsonAsync<ProductDto>().Result;
            if (updatedDto is null)
            {
                Toast.ShowToast("Something went wrong", ToastLevel.Error);
                return;
            }
            _confirmEditProduct.Name = updatedDto.Name;
            _confirmEditProduct.ReferenceNumber = updatedDto.ReferenceNumber;
            _confirmEditProduct.Quantity = updatedDto.Quantity;
            _confirmEditProduct.ThumbnailPath = updatedDto.ThumbnailPath;
            _confirmEditProduct.AvailableSizes = updatedDto.AvailableSizes;
            CancelEdit();
            StateHasChanged();
            Toast.ShowToast("Updated successfully", ToastLevel.Success);
        }
        else
        {
            Toast.ShowToast("Something went wrong: " + response.RequestMessage?.Content, ToastLevel.Error);
        }


    }
}

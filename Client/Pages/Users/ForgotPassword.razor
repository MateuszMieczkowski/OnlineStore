@page "/users/forgot-password"
@using System.ComponentModel.DataAnnotations
@using OnlineStore.Client.Shared
@inject ISnackbar Snackbar
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="p-5" Elevation="5">
        <MudText Typo="Typo.h5">Odzyskiwanie hasła</MudText>
        <EditForm Model="_resetPasswordModel" OnValidSubmit="HandleResetPassword">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group">
                <MudTextField Variant="Variant.Outlined" @bind-Value="_resetPasswordModel.Email" Label="E-mail" Placeholder="Wpisz" InputType="InputType.Email" id="email" For="@(() => _resetPasswordModel.Email)"/>
            </div>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Wyślij prośbę o zresetowanie hasła</MudButton>
        </EditForm>
    </MudPaper>
</MudContainer>

@code {
    private ResetPasswordModel _resetPasswordModel = new();

    private async Task HandleResetPassword()
    {
        var successMessage = "Jeśli adres e-mail istnieje w systemie, otrzymasz wiadomość z instrukcją zresetowania hasła.";

        try
        {
            await AccountService.ForgotPassword(_resetPasswordModel.Email);
            Snackbar.Add(successMessage, Severity.Success);
            NavigationManager.NavigateTo(NavPaths.UsersLogin);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private class ResetPasswordModel
    {
        [Required(ErrorMessage = "E-mail jest wymagany do zresetowania hasła")]
        [EmailAddress(ErrorMessage = "Wprowadzono nieprawidłowy adres e-mail")]
        public string Email { get; set; }
    }

}
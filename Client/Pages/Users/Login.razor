@page "/users/login"
@using OnlineStore.Shared.Models
@inject IAccountService AccountService
@inject NavigationManager NavManager
@inject ToastService Toast

<div class="container p-5">
	<EditForm Model="_authenticateUser" OnValidSubmit="HandleLogin">
		<DataAnnotationsValidator></DataAnnotationsValidator>
		<div class="form-group">
			<label for="email">E-mail</label>
			<input @bind="_authenticateUser.Email" type="email" class="form-control" id="email" aria-describedby="loginHelp" placeholder="Wpisz">
			<ValidationMessage For="@(() => _authenticateUser.Email)"/>
		</div>
		<div class="form-group">
			<label for="password">Hasło</label>
			<input @bind="_authenticateUser.Password" type="password" class="form-control" id="password" placeholder="Wpisz">
			<ValidationMessage For="@(() => _authenticateUser.Password)"/>
		</div>

		<button type="submit" class="btn btn-dark">Submit</button>
	</EditForm>
</div>

@code
{
	private readonly AuthenticateUser _authenticateUser = new();

	private async void HandleLogin()
	{
		var loginFailedMessage = "Nie udało się zalogować. Spróbuj ponownie";
		var loginSuccessMessage = "Zalogowano pomyślnie.";
		
		try
		{
			var isAuthenticated = await AccountService.AuthenticateAsync(_authenticateUser);
			if (isAuthenticated)
			{
				Toast.ShowToast(loginSuccessMessage, ToastLevel.Success);
				NavManager.NavigateTo("");
			}
			else
			{
				Toast.ShowToast(loginFailedMessage, ToastLevel.Error);
			}
		}
		catch (Exception ex)
		{
			Toast.ShowToast(ex.Message, ToastLevel.Error);
		}
	}
}
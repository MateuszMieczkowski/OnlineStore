@page "/users/login"
@using OnlineStore.Shared.Models
@inject IAccountService AccountService
@inject NavigationManager NavManager
@inject ISnackbar Snackbar

<div class="container p-5">
    <MudItem>
        <MudItem>
            <EditForm Model="_authenticateUser" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="form-group">
                    <MudTextField @bind-Value="_authenticateUser.Email" Label="E-mail" Placeholder="Wpisz" Type="InputType.Email" Class="mb-4" id="email" For="@(() => _authenticateUser.Email)"/>
                </div>
                <div class="form-group">
                    <MudTextField @bind-Value="_authenticateUser.Password" Label="Hasło" Placeholder="Wpisz" InputType="InputType.Password" Class="mb-4" id="password" For="@(() => _authenticateUser.Password)"/>
                </div>

                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Zaloguj</MudButton>

                <div class="form-group mt-4">
                    <NavLink href="users/forgot-password">Nie pamiętasz hasła?</NavLink>
                </div>
            </EditForm>
        </MudItem>
    </MudItem>
</div>

@code
{
    private readonly AuthenticateUser _authenticateUser = new();

    private async void HandleLogin()
    {
        var loginFailedMessage = "Nie udało się zalogować. Spróbuj ponownie";
        var loginSuccessMessage = "Zalogowano pomyślnie.";

        try
        {
            var isAuthenticated = await AccountService.AuthenticateAsync(_authenticateUser);
            if (isAuthenticated)
            {
                Snackbar.Add(loginSuccessMessage, Severity.Success);
                NavManager.NavigateTo("");
            }
            else
            {
                Snackbar.Add(loginFailedMessage, Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
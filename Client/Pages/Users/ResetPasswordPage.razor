@page "/users/reset-password/{token}"
@using OnlineStore.Client.Models.Accounts
@inject NavigationManager NavManager
@inject IAccountService AccountService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Small">
    <MudPaper Class="p-5" Elevation="5">
        <MudText Typo="Typo.h5">Zresetuj hasło</MudText>
        <EditForm Model="Model" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator></DataAnnotationsValidator>
            <div class="form-group">
                <MudTextField Variant="Variant.Outlined" @bind-Value="Model.NewPassword" Label="Hasło" Placeholder="Wpisz" InputType="InputType.Password" id="password" For="@(() => Model.NewPassword)"/>
            </div>

            <div class="form-group">
                <MudTextField Variant="Variant.Outlined" @bind-Value="Model.ConfirmNewPassword" Label="Potwierdź hasło" Placeholder="Potwierdź hasło" InputType="InputType.Password" id="confirmPassword" For="@(() => Model.ConfirmNewPassword)"/>
            </div>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary">Zresetuj hasło</MudButton>
        </EditForm>
    </MudPaper>
</MudContainer>

@code
{
    [Parameter] public string Token { get; set; } = "";

    public ResetPasswordModel Model { get; set; } = new();

    private async Task OnSubmit()
    {
        try
        {
            var successMessage = "Zresetowano hasło";
            await AccountService.ResetUserPassword(Token, Model);
            Snackbar.Add(successMessage, Severity.Success);
            NavManager.NavigateTo("/users/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }
}
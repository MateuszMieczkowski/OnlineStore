@page "/orders/manage"
@attribute [Authorize(Roles = "Admin")]
@using OnlineStore.Client.Extensions
@using OnlineStore.Shared.Clients
@using OnlineStore.Shared.Enums
@using Blazored.LocalStorage
@using OnlineStore.Shared.Orders
@inject ILocalStorageService LocalStorage
@inject IOrderService OrderService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
<PageTitle>Zarządzanie produktami</PageTitle>

<MudContainer>
    <MudTable Items="@orders" Hover="true" Loading="@_isLoading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Nr. zamówienia</MudTh>
            <MudTh>Cena netto</MudTh>
            <MudTh>Cena brutto</MudTh>
            <MudTh>Status</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Id</MudTd>
            <MudTd>@context.TotalNet</MudTd>
            <MudTd>@context.TotalGross</MudTd>
            <MudTd>@EnumHelper.GetDescription(context.Status)</MudTd>
            <MudTd>
                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Secondary">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                        <MudMenuItem Icon="@Icons.Material.Filled.Info" OnClick="@(() => NavigationManager.NavigateTo($"/orders/{context.Id}"))">Szczegóły</MudMenuItem>
                    </MudMenu>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <div class="d-flex flex-column align-center">
                <MudPagination Size="Size.Large" Variant="Variant.Filled" Color="Color.Secondary" sele SelectedChanged="PageChanged" Count="@_pageCount" Class="pa-4"/>
            </div>
        </PagerContent>
    </MudTable>
</MudContainer>

@code
{
    private IReadOnlyCollection<OrderListItemDto> orders = new List<OrderListItemDto>();
    private bool _isLoading;
    private int _pageSize;
    private int _pageNumber = 1;
    private int _pageCount;

    protected override async Task OnInitializedAsync()
    {
        var userPreferences = await LocalStorage.GetItemAsync<UserPreferencesDto>(LocalStorageKeys.UserPreferences);
        _pageSize = userPreferences?.PageSize > 0 ? userPreferences.PageSize : 20;
        await RefreshProducts();
    }

    private async Task RefreshProducts()
    {
        _isLoading = true;
        var response = await OrderService.GetOrders(_pageNumber, _pageSize);
        orders = response.Items;
        _pageCount = response.TotalPages;
        _isLoading = false;
        StateHasChanged();
    }

    private async Task PageChanged(int i)
    {
        _pageNumber = i;
        await RefreshProducts();
    }

    private async Task ExecuteAction(OrderListItemDto product, Func<int, Task> action, OrderStatusDto newStatus)
    {
        await action(product.Id);
        product.Status = newStatus;
        StateHasChanged();
        Snackbar.Add("Zaktualizowano stan zamówienia pomyślnie!");
    }
}
@page "/create"
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject ToastService Toast
@inject NavigationManager NavManager
@inject ISizeService SizeService
@inject ILogger<SneakersCreator> Logger

@using System.IO
@using Microsoft.AspNetCore.Components
@using SneakerBase.Shared.Dtos
<section role="main">
    <div class="container mt-5">
        <h2>Add new products...</h2>
        <form>
            @foreach (var product in _createdProductDtos)
            {
                <div class="border p-3 mb-3">
                    <EditForm Model="@product" Context="productContext">
                        <DataAnnotationsValidator />

                        @AddEditForm(productContext)

                        <div class="form-group ">

                            <label class="d-block">Model image</label>
                            <img class="d-block" src="@product.ThumbnailPath"/>
                            <InputFile OnChange="(e) => OnInputFileChange(e, product)" accept=".png"/>
                            <ValidationMessage For="@(() => product.ThumbnailPath)"/>
                            <br><br/>
                            <label class="d-block" for="InputProductName">Model</label>
                            <InputText class="form-control" id="InputProductName" placeholder="Enter model" @bind-Value=product.Name/>
                            <ValidationMessage For="@(() => product.Name)"/>

                        </div>
                        <div class="form-group">
                            <label for="InputReferenceNumber">Reference number</label>
                            <InputText class="form-control" id="InputReferenceNumber" placeholder="Enter reference number" @bind-Value="product.ReferenceNumber"/>
                            <ValidationMessage For="@(() => product.ReferenceNumber)"/>
                        </div>
                        <ValidationMessage For="@(() => product.AvailableSizes)"/>

                    </EditForm>


                    <label>Available sizes</label>
                    <div class="d-block">
                        @foreach (var productSize in product.AvailableSizes)
                        {
                            <EditForm Model="@productSize" Context="editSize">
                                <DataAnnotationsValidator />
                                @AddEditForm(editSize)
                                <div class="border p-3 mb-3">
                                    <label class="mr-2" for="sizes">Choose size:</label>
                                    <select id="sizes" name="sizes" @bind="productSize.SizeId">
                                        @foreach (var size in _sizes)
                                        {
                                            <option value="@size.Id">@size.Name</option>
                                        }
                                    </select>
                                    <label class="ml-2 mr-2" for="quantity">Quantity:</label>
                                    <InputNumber id="quantity" min="0" max="1000" @bind-Value="productSize.Quantity" />
                                    <button type="button" class="btn btn-dark ml-2" @onclick="() => RemoveSize(product, productSize)">Remove size</button>
                                    <ValidationMessage For="@(() => productSize.Quantity)" />
                                    <ValidationMessage For="@(() => productSize.SizeId)" />


                                </div>
                            </EditForm>
                        }
                        <button type="button" class="btn btn-dark" @onclick="() => AddNewSize(product)">Add next size</button>
                        <button type="button" class="btn btn-outline-dark" @onclick="() => Remove(product)">Remove product</button>


                    </div>
                </div>
            }
        </form>

        <div class="mt-3 mb-5">
            <button type="button" class="btn btn-dark" @onclick="OnButtonClick">Add next product</button>
            <button type="button" @onclick="Submit" class="btn btn-dark btn-lg btn-save-changes">Save new products</button>

        </div>
    </div>

</section>
<div class="position-absolute bottom-0 end-0">
</div>


@code
{
    private List<CreateProductDto> _createdProductDtos;
    private List<SizeDto> _sizes;
    private EditForm _editForm;
    private EditForm _editSizeForm;
    private List<EditContext> _editContexts;

    protected override async Task OnInitializedAsync()
    {
        _createdProductDtos = new List<CreateProductDto>();
        _editContexts = new List<EditContext>();
        _sizes = await SizeService.GetAllAsync();
        await AddNewProduct();
    }



    private async Task AddNewProduct()
    {
        if (_createdProductDtos.Count == 10)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Maximum number of added products up to 10!"); // Alert
            return;
        }
        var newProduct = new CreateProductDto();
        AddNewSize(newProduct);
        _createdProductDtos.Add(newProduct);
        await InvokeAsync(StateHasChanged);
    }

    private void AddNewSize(CreateProductDto product)
    {
        product.AvailableSizes.Add(new CreateProductSizeDto());
        InvokeAsync(StateHasChanged);
    }

    private async void OnButtonClick()
    {
        await Task.Run(AddNewProduct);
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    private async void Remove(CreateProductDto product)
    {
        if (_createdProductDtos.Count == 1)
        {
            Toast.ShowToast("There must be at least one product!", ToastLevel.Warning);
            return;
        }
        await Task.Run(() => _createdProductDtos.Remove(product));
        await InvokeAsync(StateHasChanged);
    }

    private async void RemoveSize(CreateProductDto product, CreateProductSizeDto size)
    {
        if (product.AvailableSizes.Count == 1)
        {
            Toast.ShowToast("There must be at least one size!", ToastLevel.Warning);
            return;
        }
        await Task.Run(() => product.AvailableSizes.Remove(size));
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e, CreateProductDto dto)
    {
        var fileFormat = "image/png";
        var imageFile = await e.File.RequestImageFileAsync(fileFormat, 250, 250);

        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);
        dto.ThumbnailPath = $"data:{fileFormat};base64, {Convert.ToBase64String(buffer)}";

        this.StateHasChanged();
    }
  
    private async Task Submit()
    {
        bool isValidate = true;
        foreach (var editContext in _editContexts)
        {
            if (!editContext.Validate())
            {
                isValidate = false;
            }
        }

        if (isValidate)
        {
            using var response = await Http.PostAsJsonAsync("api/products", _createdProductDtos);
            if (!response.IsSuccessStatusCode)
            {

                Toast.ShowToast($"There was an error: {response.ReasonPhrase}", ToastLevel.Error);
                return;
            }
            Toast.ShowToast("Products created successfully!", ToastLevel.Success);
            NavManager.NavigateTo("/");
        }
    }

    private string AddEditForm(EditContext? editContext)
    {
        if (editContext != null) _editContexts.Add(editContext);
        return string.Empty;
    }
}

@page "/creator"
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@using System.IO
@using Microsoft.AspNetCore.Components
@using SneakerBase.Shared.Dtos
<section class="ProductCreator">
    <div class="container mt-5">
        <h2>Add new products...</h2>
        <form>

            @foreach (var product in createdProductDtos)
            {
                <div class="border p-3 mb-3">
                    <EditForm @ref="editForm" Model="@product" Context="test" OnValidSubmit="HandleValidSubmit">
                        @AddEditForm(editForm)

                        <div class="form-group ">

                            <DataAnnotationsValidator/>
                            <label class="d-block">Model image</label>
                            <img class="d-block" src="@product.ThumbnailPath"/>
                            <InputFile OnChange="(e) => OnInputFileChange(e, product)" accept=".png"/>
                            <ValidationMessage For="@(() => product.ThumbnailPath)"/>
                            <br><br/>
                            <label class="d-block" for="InputProductName">Model</label>
                            <InputText class="form-control" id="InputProductName" placeholder="Enter model" @bind-Value=product.Name/>
                            <ValidationMessage For="@(() => product.Name)"/>

                        </div>
                        <div class="form-group">
                            <label for="InputReferenceNumber">Reference number</label>
                            <InputText class="form-control" id="InputReferenceNumber" placeholder="Enter reference number" @bind-Value="product.ReferenceNumber"/>
                            <ValidationMessage For="@(() => product.ReferenceNumber)"/>
                        </div>
                        <ValidationMessage For="@(() => product.AvailableSizes)"/>

                    </EditForm>


                    <label>Available sizes</label>
                    <div class="d-block">
                        @foreach (var productSize in product.AvailableSizes)
                        {
                            <EditForm @ref="editSizeForm" Model="@productSize" OnValidSubmit="HandleValidSubmit">

                                <DataAnnotationsValidator />
                                @AddEditForm(editSizeForm)
                                <div class="border p-3 mb-3">
                                    <label class="mr-2" for="sizes">Choose size:</label>
                                    <select id="sizes" name="cars" @bind="productSize.SizeId">
                                        @foreach (var size in sizes)
                                        {
                                            <option value="@size.Id">@size.Name</option>
                                        }
                                    </select>
                                    <label class="ml-2 mr-2" for="quantity">Quantity:</label>
                                    <InputNumber id="quantity" min="0" max="100" @bind-Value="productSize.Quantity" />
                                    <button type="button" class="btn btn-dark ml-2" @onclick="() => RemoveSize(product, productSize)">Remove size</button>
                                    <ValidationMessage For="@(() => productSize.Quantity)" />


                                </div>
                            </EditForm>
                        }
                        <button type="button" class="btn btn-dark" @onclick="() => AddNewSize(product)">Add next size</button>
                        <button type="button" class="btn btn-outline-dark" @onclick="() => Remove(product)">Remove product</button>


                    </div>
                </div>
                i++;
            }
        </form>

        <div class="mt-3 mb-5">
            <button type="button" class="btn btn-dark" @onclick="OnButtonClick">Add next product</button>
            <button type="button" @onclick="Submit" class="btn btn-dark fixed-bottom w-25">Save new products</button>
        </div>
    </div>

</section>


@code
{
    private List<CreateProductDto> createdProductDtos;
    private List<SizeDto> sizes;
    private int counter;
    private EditForm editForm;
    private EditForm editSizeForm;
    private List<EditForm> editForms;
    private int i = 0;
    protected override void OnInitialized()
    {
        sizes = new List<SizeDto>()
        {
            new SizeDto()
            {
                Id = 0,
                Name = "41",
            },
            new SizeDto()
            {
                Id = 1,
                Name = "42"
            },
            new SizeDto()
            {
                Id = 2,
                Name = "43.5"
            },
            new SizeDto()
            {
                Id = 3,
                Name = "44"
            },
            new SizeDto()
            {
                Id = 4,
                Name = "44.5"
            }
        };
        createdProductDtos = new List<CreateProductDto>();
        editForms = new List<EditForm>();
        AddNewProduct();
    }

    private async Task AddNewProduct()
    {
        if (createdProductDtos.Count == 10)
        {
            await JsRuntime.InvokeVoidAsync("alert", "Maximum number of added products up to 10!"); // Alert
            return;
        }
        var newProduct = new CreateProductDto();
        AddNewSize(newProduct);
        createdProductDtos.Add(newProduct);
        await InvokeAsync(StateHasChanged);
    }

    private void AddNewSize(CreateProductDto product)
    {
        product.AvailableSizes.Add(new CreateProductSizeDto());
        InvokeAsync(StateHasChanged);
    }

    private async void OnButtonClick()
    {
        await Task.Run(AddNewProduct);
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    private async void Remove(CreateProductDto product)
    {
        if (createdProductDtos.Count == 1)
        {
            await JsRuntime.InvokeVoidAsync("alert", "There must be at least one product!"); // Alert
            return;
        }
        await Task.Run(() => createdProductDtos.Remove(product));
        await InvokeAsync(StateHasChanged);
    }

    private async void RemoveSize(CreateProductDto product, CreateProductSizeDto size)
    {
        if (product.AvailableSizes.Count == 1)
        {
            await JsRuntime.InvokeVoidAsync("alert", "There must be at least one size!"); // Alert
            return;
        }
        await Task.Run(() => product.AvailableSizes.Remove(size));
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e, CreateProductDto dto)
    {
        var fileFormat = "image/png";
        var imageFile = await e.File.RequestImageFileAsync(fileFormat, 250, 250);

        var buffer = new byte[imageFile.Size];
        await imageFile.OpenReadStream().ReadAsync(buffer);
        dto.ThumbnailPath = $"data:{fileFormat};base64, {Convert.ToBase64String(buffer)}";

        this.StateHasChanged();
    }
    private async Task HandleValidSubmit()
    {
        await JsRuntime.InvokeVoidAsync("alert", "Validation passed succesed!"); // Alert
    }
    private void Submit()
    {
        bool isValidate = true;
        foreach (var editForm in editForms)
        {
            if (!editForm.EditContext.Validate())
            {
                isValidate = false;
            }
        }

        if (isValidate)
        {
            HandleValidSubmit();
        }
    }

    private string AddEditForm(EditForm? editForm)
    {
        if (editForm != null) editForms.Add(editForm);
        return string.Empty;
    }
}

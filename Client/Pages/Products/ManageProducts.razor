@page "/configuration"
@attribute [Authorize(Roles = "Admin")]
@using OnlineStore.Client.Extensions
@using OnlineStore.Shared.Clients
@using OnlineStore.Shared.Enums
@using OnlineStore.Shared.Products
@using Blazored.LocalStorage
@inject ILocalStorageService LocalStorage
@inject IProductService ProductService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
<PageTitle>Zarządzanie produktami</PageTitle>

<MudContainer>
    <ProductsFilter OnSearchStringChanged="@RefreshProducts"/>
    <MudTable Items="@products" Hover="true" Loading="@_isLoading" LoadingProgressColor="Color.Info">
        <HeaderContent>
            <MudTh>Nazwa</MudTh>
            <MudTh>Numer referencyjny</MudTh>
            <MudTh>Ilość</MudTh>
            <MudTh>Cena netto</MudTh>
            <MudTh>Cena brutto</MudTh>
            <MudTh>Stan</MudTh>
            <MudTh>Akcje</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.ReferenceNumber</MudTd>
            <MudTd>@context.Quantity</MudTd>
            <MudTd>@context.PriceNet</MudTd>
            <MudTd>@context.PriceGross</MudTd>
            <MudTd>@EnumHelper.GetDescription(context.Status)</MudTd>
            <MudTd>
                <MudButtonGroup Variant="Variant.Outlined" Color="Color.Secondary">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" ActivationEvent="@MouseEvent.MouseOver" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                        <MudMenuItem Icon="@Icons.Material.Filled.Info" OnClick="@(() => NavigationManager.NavigateTo($"/products/{context.Id}"))">Szczegóły</MudMenuItem>
                        <MudMenuItem Icon="@Icons.Material.Filled.Edit" OnClick="@(() => NavigationManager.NavigateTo($"/products/{context.Id}/edit"))">Edycja</MudMenuItem>
                        @if (context.Status != ProductStatusDto.Hidden)
                        {
                            <MudMenuItem OnClick="() => ExecuteAction(context, ProductService.Hide, ProductStatusDto.Hidden)" Icon="@Icons.Material.Filled.HideSource">Ukryj</MudMenuItem>
                        }
                        else
                        {
                            <MudMenuItem OnClick="() => ExecuteAction(context, ProductService.Reveal, ProductStatusDto.Active)" Icon="@Icons.Material.Filled.ArrowBack">Odkryj</MudMenuItem>
                        }
                        @if (context.Status != ProductStatusDto.Deleted)
                        {
                            <MudMenuItem OnClick="() => ExecuteAction(context, ProductService.SoftDelete, ProductStatusDto.Deleted)" Icon="@Icons.Material.Filled.FolderDelete">Do kosza</MudMenuItem>
                        }
                        else
                        {
                            <MudMenuItem OnClick="() => ExecuteAction(context, ProductService.Recover, ProductStatusDto.Active)" Icon="@Icons.Material.Filled.FolderDelete">Przywróć z kosza</MudMenuItem>
                        }
                    </MudMenu>
                </MudButtonGroup>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <div class="d-flex flex-column align-center">
                <MudPagination Size="Size.Large" Variant="Variant.Filled" Color="Color.Secondary" sele SelectedChanged="PageChanged" Count="@_pageCount" Class="pa-4"/>
            </div>
        </PagerContent>
    </MudTable>
</MudContainer>

@code
{
    private IReadOnlyCollection<ProductListItemDto> products = new List<ProductListItemDto>();
    private bool _isLoading;
    private int _pageSize;
    private int _pageNumber = 1;
    private int _pageCount;

    protected override async Task OnInitializedAsync()
    {
        var userPreferences = await LocalStorage.GetItemAsync<UserPreferencesDto>(LocalStorageKeys.UserPreferences);
        _pageSize = userPreferences?.PageSize > 0 ? userPreferences.PageSize : 20;
        await RefreshProducts();
    }

    private async Task RefreshProducts(string? searchPhrase = null)
    {
        _isLoading = true;
        var response = await ProductService.GetProductList(_pageNumber, _pageSize, searchPhrase: searchPhrase);
        products = response.Items;
        _pageCount = response.TotalPages;
        _isLoading = false;
        StateHasChanged();
    }

    private async Task PageChanged(int i)
    {
        _pageNumber = i;
        await RefreshProducts();
    }

    private async Task ExecuteAction(ProductListItemDto product, Func<int, Task> action, ProductStatusDto newStatus)
    {
        await action(product.Id);
        product.Status = newStatus;
        StateHasChanged();
        Snackbar.Add("Zaktualizowano stan produktu pomyślnie!");
    }
}
@using OnlineStore.Shared.Products
@using System.Reflection.Metadata.Ecma335
@inject IProductService ProductService

<div class="w-100 mb-4">
    <MudPaper Elevation="4">
        <MudContainer MaxWidth="MaxWidth.Medium">
            <MudGrid Justify="Justify.FlexStart">
                <MudItem xs="8">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="_searchString" DebounceInterval="400" OnDebounceIntervalElapsed="StageFilter" Label="Szukaj"/>
                </MudItem>
                <MudItem Class="mt-3">
                    <MudButton StartIcon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset">Wyczyść</MudButton>
                </MudItem>
                <MudItem Class="mt-3">
                    <MudButton StartIcon="@Icons.Material.Filled.FilterList" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => _showFilters = !_showFilters)">Filtry</MudButton>
                </MudItem>
            </MudGrid>
            @if (_showFilters)
            {
                <MudTextField DebounceInterval="400" Variant="Variant.Outlined" Label="Nazwa" @bind-Value="_filter.Name"/>
                <MudTextField DebounceInterval="400" Variant="Variant.Outlined" Label="Opis" @bind-Value="_filter.Description"/>
                <MudTextField DebounceInterval="400" Variant="Variant.Outlined" Label="Numer referencyjny" @bind-Value="_filter.ReferenceNumber"/>
                <div class="d-flex gap-2">
                    <MudNumericField Format="N2" DebounceInterval="400" Variant="Variant.Outlined" Label="Cena od" @bind-Value="_filter.MinPrice"/>
                    <MudNumericField Format="N2" DebounceInterval="400" Variant="Variant.Outlined" Label="Cena do" @bind-Value="_filter.MaxPrice"/>
                </div>
                <MudSwitch Color="Color.Secondary" Label="Produkty ukryte" @bind-Checked="_filter.HiddenOnly"/>
            }
        </MudContainer>
    </MudPaper>
</div>

@code {
    [Parameter] public EventCallback<string> OnSearchStringChanged { get; set; }

    private string? _searchString = string.Empty;

    private bool _showFilters;
    private ProductFilter _filter = new();

    private async Task StageFilter(string filter)
    {
        _searchString = filter;
        await OnSearchStringChanged.InvokeAsync(_searchString);
    }

    private async Task Reset()
    {
        _searchString = string.Empty;
        await StageFilter("");
    }

    public class ProductFilter
    {
        public string Name { get; set; }
        public string ReferenceNumber { get; set; }
        public string Description { get; set; }
        public decimal MinPrice { get; set; }
        public decimal MaxPrice { get; set; }
        public bool HiddenOnly { get; set; }
        public bool DeletedOnly { get; set; }
    }

}
@using OnlineStore.Shared.Products
@using System.Reflection.Metadata.Ecma335
@using Blazored.LocalStorage
@using OnlineStore.Client.Products.Models
@using OnlineStore.Client.Shared
@using OnlineStore.Shared.Clients
@using OnlineStore.Shared.Enums
@inject ILocalStorageService LocalStorage
@inject IProductService ProductService
@inject NavigationManager NavigationManager

<div class="w-100 mb-4">
    <MudPaper Elevation="4">
        <MudContainer MaxWidth="MaxWidth.Large">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="6">
                    <MudTextField Variant="Variant.Outlined" @bind-Value="_filter.SearchPhrase" DebounceInterval="400" OnDebounceIntervalElapsed="StageFilter" Label="Szukaj"/>
                </MudItem>
                <MudItem Class="mt-3">
                    <MudButton StartIcon="@Icons.Material.Filled.Clear" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Reset">Wyczyść</MudButton>
                </MudItem>
                <MudItem Class="mt-3">
                    <MudButton StartIcon="@Icons.Material.Filled.FilterList" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="@(() => _showFilters = !_showFilters)">Filtry</MudButton>
                </MudItem>
                @if (!HideBinButton)
                {
                    @if (!ShowBin)
                    {
                        <MudItem Class="mt-3">
                            <AuthorizeView Roles="Admin">
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.FolderDelete" OnClick="@(() => StageBin(true))">Kosz</MudButton>
                            </AuthorizeView>
                        </MudItem>
                    }
                    else
                    {
                        <MudItem Class="mt-3">
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.DeleteForever" OnClick="@EmptyBin">Opróżnij kosz</MudButton>
                        </MudItem>
                        <MudItem Class="mt-3">
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" StartIcon="@Icons.Material.Filled.ArrowBack" OnClick="@(() => StageBin(false))">Powrót</MudButton>
                        </MudItem>
                    }
                }
            </MudGrid>
            @if (_showFilters)
            {
                <MudTextField OnDebounceIntervalElapsed="StageFilter" DebounceInterval="400" Variant="Variant.Outlined" Label="Nazwa" @bind-Value="_filter.Name"/>
                <MudTextField OnDebounceIntervalElapsed="StageFilter" DebounceInterval="400" Variant="Variant.Outlined" Label="Krótki opis" @bind-Value="_filter.ShortDescription"/>
                <MudTextField OnDebounceIntervalElapsed="StageFilter" DebounceInterval="400" Variant="Variant.Outlined" Label="Numer referencyjny" @bind-Value="_filter.ReferenceNumber"/>
                <div class="d-flex gap-2">
                    <MudNumericField OnDebounceIntervalElapsed="StageFilter" Format="N2" DebounceInterval="400" Variant="Variant.Outlined" Label="Cena od" @bind-Value="_filter.MinPrice"/>
                    <MudNumericField OnDebounceIntervalElapsed="StageFilter" Format="N2" DebounceInterval="400" Variant="Variant.Outlined" Label="Cena do" @bind-Value="_filter.MaxPrice"/>
                </div>
                <MudSwitch T="bool" CheckedChanged="@((e) => StageGrossFilter(e))" Checked="_filter.FilterGrossPrice" Color="Color.Secondary" Label="Filtruj ceny brutto"/>
                <AuthorizeView Roles="Admin">
                    <MudSwitch T="bool" CheckedChanged="@((e) => StageHiddenFilter(e))" Checked="_filter.HiddenOnly" Color="Color.Secondary" Label="Tylko produkty ukryte"/>
                </AuthorizeView>
            }
        </MudContainer>
    </MudPaper>
</div>

@code {

    [Parameter] public EventCallback OnEmptyBin { get; set; }
    [Parameter] public EventCallback<ProductFilterModel> OnFilterChanged { get; set; }
    [Parameter] public bool HideBinButton { get; set; }
    [Parameter] public bool ShowBin { get; set; }

    private bool _showFilters;
    private ProductFilterModel _filter = new();

    protected override async Task OnInitializedAsync()
    {
        var userPreferences = await LocalStorage.GetItemAsync<UserPreferencesDto>(LocalStorageKeys.UserPreferences);
        _filter.FilterGrossPrice = userPreferences?.DisplayedPrice == DisplayedPriceDto.Gross;
        _filter.DeletedOnly = ShowBin;
    }

    private async Task StageHiddenFilter(bool hiddenOnly)
    {
        _filter.HiddenOnly = hiddenOnly;
        await StageFilter();
    }

    private async Task StageGrossFilter(bool filterGrossPrice)
    {
        _filter.FilterGrossPrice = filterGrossPrice;
        await StageFilter();
    }

    private async Task StageFilter()
    {
        await OnFilterChanged.InvokeAsync(_filter);
    }

    private async Task EmptyBin()
    {
        await OnEmptyBin.InvokeAsync();
        await StageBin(false);
    }

    private async Task Reset()
    {
        _filter.Clear();
        await StageFilter();
    }

    private async Task StageBin(bool showBin)
    {
        var queryParam = showBin ? "?showBin=true" : "";
        NavigationManager.NavigateTo($"{NavPaths.ProductsManage}{queryParam}");
        ShowBin = showBin;
        _filter.DeletedOnly = ShowBin;
        await StageFilter();
    }

}
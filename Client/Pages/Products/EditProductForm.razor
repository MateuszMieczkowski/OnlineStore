@page "/products/{id:int}/edit"
@using OnlineStore.Client.Products.Models
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject IProductService ProductService 

<div class="container mt-5">
    <h2>Aktualizuj dane produktu</h2>

    <MudCard Outlined="true">
        <MudCardContent>
            <EditForm Model="@_product" OnValidSubmit="Submit">
                <DataAnnotationsValidator/>
                @* @AddEditForm(productContext) *@
                <ProductForm _model="@_product"/>
            </EditForm>
        </MudCardContent>
    </MudCard>

    <div class="mt-3 mb-5">
        <MudButton Disabled="_isLoading" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@GoBack">Anuluj</MudButton>
        <MudButton Disabled="_isLoading" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" OnClick="@Submit">
            @if (_isLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2">Zapisywanie</MudText>
            }
            else
            {
                <MudText>Aktualizuj produkt</MudText>
            }
        </MudButton>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    private bool _isLoading;
    private UpdateProductModel _product = new();

    protected override async Task OnInitializedAsync()
    {
        var productDto = await ProductService.GetProductById(Id);
        var fileModels = productDto.ProductFiles.Select(x => new UpdateProductFileModel
        {
            Id = x.Id,
            ThumbnailBlobUri = x.BlobUri,
            Description = x.Description,
            FileName = x.FileName,
            ProductFileType = x.FileType
        }).ToList();

        _product = new UpdateProductModel
        {
            Id = Id,
            Name = productDto.Name,
            ReferenceNumber = productDto.ReferenceNumber,
            ShortDescription = productDto.ShortDescription,
            Description = productDto.Description,
            IsHidden = productDto.IsHidden,
            PriceNet = productDto.PriceNet,
            Quantity = productDto.Quantity,
            TaxRate = productDto.TaxRate,
            ThumbnailImageSource = productDto.ThumbnailUri,
            ProductFiles = fileModels
        };
    }

    private async Task Submit()
    {
        _isLoading = true;

        try
        {
            // var isValidate = true;
            //     if (!editContext.Validate())
            //     {
            //         isValidate = false;
            //     }
            // if (!isValidate)
            // {
            //     throw new Exception("Popraw formularz");
            // }
            //
            // StateHasChanged();
            
            await ProductService.Update(Id, _product);
            Snackbar.Add("Zaktualizowano produkt", Severity.Success);
            await GoBack();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task GoBack()
    {
        await JsRuntime.InvokeVoidAsync("history.back");
    }
}
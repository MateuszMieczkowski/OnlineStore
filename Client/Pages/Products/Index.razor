@page "/"
@using OnlineStore.Shared.Products
@using OnlineStore.Shared.Clients
@using Blazored.LocalStorage
@inject NavigationManager NavigationManager
@inject IProductService ProductService
@inject ILocalStorageService LocalStorage

<PageTitle>Dostępne produkty</PageTitle>

@* <ProductsFilter Products="_products" OnSearchStringChanged="Refresh"></ProductsFilter> *@

@if (_isLoading)	
{
	<div class="d-flex align-content-center justify-content-center">
	<MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true" />
	</div>
}
else
{

		<div class="row d-flex gap-3">
            @foreach (var product in _products)  //.Where(p => p.IsVisible))
            {
	            <MudCard Square="true" @onclick="@(() => NavigationManager.NavigateTo($"products/{product.Id}"))">
		            <MudCardMedia Image="@product.ThumbnailUri" Height="200" />
		            <MudCardContent>
			            <MudText Typo="Typo.h5">@product.Name</MudText>
			            <MudText Typo="Typo.h6">@product.PriceGross zł</MudText>
			            <MudText Typo="Typo.body2">@product.ReferenceNumber.</MudText>
			            <MudText Typo="Typo.body2">Ilość: @product.Quantity</MudText>
		            </MudCardContent>
		            <MudCardActions>
			            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.ShoppingCartCheckout">Kup teraz</MudButton>
			            <MudButton Variant="Variant.Text" Color="Color.Primary" StartIcon="@Icons.Material.Filled.AddShoppingCart">Dodaj do koszyka</MudButton>
		            </MudCardActions>
	            </MudCard>
			}
		</div>
		<div class="d-flex flex-column align-center">
			<MudPagination Size="Size.Large" Variant="Variant.Filled"  Color="Color.Secondary" @bind-Selected="@PageNumber" Count="@_pageCount" Class="pa-4"/>
		</div>

}

@code {

	private IReadOnlyCollection<ProductListItemDto> _products = new List<ProductListItemDto>();
	private bool _isLoading = true;
	private UserPreferencesDto? _userPreferences;
	private int _pageNumber = 1;
	private int _pageCount;

	public int PageNumber
	{
		set
		{
			_pageNumber = value;
			PageChanged(_pageNumber).RunSynchronously();
		}
		get => _pageNumber;
	}

	protected override async Task OnInitializedAsync()
	{
		_userPreferences = await LocalStorage.GetItemAsync<UserPreferencesDto>(LocalStorageKeys.UserPreferences);
		await GetProducts();
	}

	private async Task GetProducts()
	{
		_isLoading = true;
		var response = await ProductService.GetProductList(_pageNumber, _userPreferences?.PageSize ?? 20);
		_products = response.Items;
		_pageCount = response.TotalPages;
		_isLoading = false;
		StateHasChanged();
	}

	private async Task PageChanged(int i)
	{
		_pageNumber = i;
		await GetProducts();
	}
}
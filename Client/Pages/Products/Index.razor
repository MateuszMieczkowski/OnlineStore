@page "/"
@using Blazored.LocalStorage
@using OnlineStore.Client.Components.Orders
@using OnlineStore.Client.Products.Models
@using OnlineStore.Shared.Clients
@using OnlineStore.Shared.Enums
@using OnlineStore.Shared.Products
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage
@inject IProductService ProductService

<PageTitle>Dostępne produkty</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <ProductsFilter OnFilterChanged="@GetProducts"/>

    @if (_isLoading)
    {
        <div class="d-flex align-content-center justify-content-center mb-5">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
        </div>
    }
    else
    {
        <MudGrid Spacing="6" Justify="Justify.Center" Class="mb-5">
            @foreach (var product in _products)
            {
                <MudItem xs="3">
                    <MudCard @onclick="@(() => NavigationManager.NavigateTo($"products/{product.Id}"))" class="pointer">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudTooltip Duration="250" Text="@product.Name" Placement="Placement.Top">
                                    <MudText Style="width: 16vw; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;" Typo="Typo.subtitle2">@product.Name</MudText>
                                </MudTooltip>
                                <MudText Typo="Typo.caption">@product.ReferenceNumber</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudTooltip Duration="250" Text="@product.ShortDescription" Placement="Placement.Top">
                                    <MudIconButton Icon="@Icons.Material.Filled.Description" Color="Color.Primary"/>
                                </MudTooltip>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardMedia Image="@product.ThumbnailUri"/>
                        <MudCardContent>
                            <MudText Typo="Typo.subtitle2">@(_showNetPrice ? product.PriceNet : product.PriceGross) zł</MudText>
                            <MudText Typo="Typo.caption">Ilość: @product.Quantity</MudText>
                        </MudCardContent>
                        <MudCardActions>
                            <BuyActionsComponent Product="product"/>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>
        <div class="d-flex flex-column align-center">
            <MudPagination Size="Size.Large" Variant="Variant.Filled" Color="Color.Secondary" @bind-Selected="@PageNumber" Count="@_pageCount" Class="pa-4"/>
        </div>
    }
</MudContainer>

@code {

    private IReadOnlyCollection<ProductListItemDto> _products = new List<ProductListItemDto>();
    private bool _isLoading = true;
    private UserPreferencesDto? _userPreferences;
    private int _pageNumber = 1;
    private int _pageCount;
    private int _pageSize;
    private bool _showNetPrice;

    public int PageNumber
    {
        set
        {
            _pageNumber = value;
            PageChanged(_pageNumber).RunSynchronously();
        }
        get => _pageNumber;
    }

    protected override async Task OnInitializedAsync()
    {
        _userPreferences = await LocalStorage.GetItemAsync<UserPreferencesDto>(LocalStorageKeys.UserPreferences);
        _showNetPrice = _userPreferences?.DisplayedPrice == DisplayedPriceDto.Net;
        _pageSize = _userPreferences?.PageSize > 0 ? _userPreferences.PageSize : 20;

        await GetProducts();
    }

    private async Task GetProducts(ProductFilterModel? filter = null)
    {
        _isLoading = true;

        var response = await ProductService.GetProductList(_pageNumber, _pageSize, filter ?? new ProductFilterModel());
        _products = response.Items;
        _pageCount = response.TotalPages;
        _isLoading = false;
        StateHasChanged();
    }

    private async Task PageChanged(int i)
    {
        _pageNumber = i;
        await GetProducts();
    }

}